<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 自动扫描的包名 ，使Spring支持自动检测组件，如注解的Controller-->
    <context:component-scan base-package="com.uniledger.contract" />
    <mvc:annotation-driven/>

    <!--跨域配置-->
    <!--1.web.xml,Filter;2.spring-mvc.xml;3.@CrossOrigin;-->
    <mvc:cors>
        <mvc:mapping path="/**"
                     max-age="7200"
                     allowed-origins="*"
                     allow-credentials="true"
                     allowed-methods="GET,POST,OPTIONS"
                     allowed-headers="Origin,Accept,Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With"  />
    </mvc:cors>
    <!--<bean class="com.uniledger.contract.swagger.RestApiConfig" /> -->
    <!--使用bean申明可以去掉@configuration-->
    <!--扫描@configuration注解-->
    <context:component-scan base-package="com.uniledger.contract.swagger"/>
    <!--配置静态资源访问-->
    <mvc:resources mapping="swagger-ui.html" location="classpath:/META-INF/resources/"/>
    <mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/"/>

    <import resource="spring-druid.xml"/>


    <!-- 隐式地向 Spring 容器注册 -->
    <context:annotation-config/>

    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <!-- 配置Fastjson支持 -->
            <bean id="fastJsonHttpMessageConverter" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/json;charset=UTF-8</value>
                        <value>application/json;charset=UTF-8</value>
                        <value>text/html;charset=UTF-8</value>
                    </list>
                </property>
                <property name="fastJsonConfig">
                    <bean class="com.alibaba.fastjson.support.config.FastJsonConfig">
                        <property name="features">
                            <list>
                                <value>AllowArbitraryCommas</value>
                                <value>AllowUnQuotedFieldNames</value>
                                <value>DisableCircularReferenceDetect</value>
                            </list>
                        </property>
                        <property name="serializerFeatures">
                            <list>
                                <value>WriteNullStringAsEmpty</value>
                                <!--<value>WriteNullListAsEmpty</value>-->
                                <!--<value>PrettyFormat</value>-->
                            </list>
                        </property>
                        <property name="dateFormat" value="yyyy-MM-dd HH:mm:ss"></property>
                    </bean>
                </property>
            </bean>
            <!--QuoteFieldNames———-输出key时是否使用双引号,默认为true-->
            <!--WriteMapNullValue——–是否输出值为null的字段,默认为false-->
            <!--WriteNullNumberAsZero—-数值字段如果为null,输出为0,而非null-->
            <!--WriteNullListAsEmpty—–List字段如果为null,输出为[],而非null-->
            <!--WriteNullStringAsEmpty—字符类型字段如果为null,输出为”“,而非null-->
            <!--WriteNullBooleanAsFalse–Boolean字段如果为null,输出为false,而非null-->

        </mvc:message-converters>
    </mvc:annotation-driven>

    <context:component-scan base-package="springfox"/>
    <!--静态资源-->
    <mvc:default-servlet-handler />
    <mvc:resources location="/static/" mapping="/**"/>
    <!--<mvc:resources location="/static/src/" mapping="/src/**"/>-->
    <!--<mvc:resources location="/static/common/" mapping="/common/**"/>-->
    <!--<mvc:resources location="/static/test/" mapping="/test/**"/>-->
    <!--<mvc:resources location="/static/third-lib/" mapping="/third-lib/**"/>-->

    <!-- 定义跳转的文件的前后缀 ，视图模式配置-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".html" />
    </bean>

    <!--配置拦截器, 多个拦截器,顺序执行 -->
    <mvc:interceptors>
        <mvc:interceptor>
            <!-- 匹配的是url路径  -->
            <!--<mvc:mapping path="/" />-->
            <!--<mvc:mapping path="/test/**" />-->
            <mvc:mapping path="/fileContract/**" />
            <mvc:mapping path="/productContract/**" />
            <mvc:mapping path="/contractUser/**" />
            <mvc:mapping path="/companyUser/**" />
            <mvc:mapping path="/mxGraph/saveMxgraphXml" />
            <mvc:mapping path="/mxGraph/saveMxGraphXml" />
            <mvc:mapping path="/mxGraph/saveMxgraphToImage" />
            <mvc:mapping path="/mxGraph/autoSaveMxGraphXml" />
            <mvc:mapping path="/contractLog/logView" />
            <mvc:mapping path="/transferController/**" />
            <bean class="com.uniledger.contract.interceptor.LoginInterceptor" >
                <property name="excludedUrls">
                    <list>
                        <value>/login</value>
                        <value>/logout</value>
                        <value>/api-docs</value>
                    </list>
                </property>
            </bean>
        </mvc:interceptor>
        <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->
    </mvc:interceptors>

    <bean id="exceptionHandler" class="com.uniledger.contract.exception.DefaultExceptionHadler" />
    <!--定时器-->
    <import resource="quartz-context.xml"/>

</beans>
